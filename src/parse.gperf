%{
#include "h.h"
#include "sux.h"
#include "main.h"
#include "parse.h"
#include "match.h"
#include "table.h"
#include "network.h"

static void remove_unknown(gchar *, gchar *);

REMOTE_TABLE_INSTANCE(user);

%}
struct Message { gchar *cmd; gint (*func)(User *, gint, gchar **); guint count; };
%%
436, m_nickcoll, 0
ADMIN, m_admin, 0
AWAY, m_away, 0
BURST, m_burst, 0
CAPAB, m_capab, 0
ERROR, m_error, 0
GNOTICE, m_gnotice, 0
INFO, m_info, 0
JOIN, m_join, 0
KICK, m_kick, 0
KILL, m_kill, 0
MODE, m_mode, 0
NICK, m_nick, 0
MOTD, m_motd, 0
NOTICE, m_notice, 0
PART, m_part, 0
PASS, m_pass, 0
PING, m_ping, 0
PONG, m_pong, 0
PRIVMSG, m_private, 0
QUIT, m_quit, 0
SJOIN, m_sjoin, 0
SQUIT, m_squit, 0
STATS, m_stats, 0
SVINFO, m_svinfo, 0
SERVER, m_server, 0
TIME, m_time, 0
TOPIC, m_topic, 0
VERSION, m_version, 0
NS, m_ns, 0
CS, m_rs, 0
MS, m_cs, 0
OS, m_os, 0
RS, m_rs, 0
%%
/*
 * parse a buffer.
 * 
 * NOTE: parse() should not be called recusively by any other functions!
 */

gint parse(gchar *buffer)
{
    static gchar sender[HOSTLEN + 1];
    static gchar *para[MAXPARA + 1];

    gchar *ch, *s;
    gint i, len = 0;
    struct Message *mptr;
    User *u = NULL;

    /* g_fprintf(stderr, "<: %s\n", buffer); */
    s = sender;
    *s = '\0';
    
    for (ch = buffer; *ch == ' '; ch++);	/* skip spaces */
    
    para[0] = me.uplink;
    if (*ch == ':') 
    {
	/*
	 * Copy the prefix to 'sender' assuming it terminates with
	 * SPACE (or NULL, which is an error, though).
	 */
	
	for (++ch; *ch && *ch != ' '; ++ch)
	    if (s < (sender + HOSTLEN))
		*s++ = *ch;		
	*s = '\0';
	
	/*
	 * Actually, only messages coming from servers can have the
	 * prefix--prefix silently ignored, if coming from a user
	 * client...
	 * 
	 * ...sigh, the current release "v2.2PL1" generates also null
	 * prefixes, at least to NOTIFY messages (e.g. it puts
	 * "sptr->nickname" as prefix from server structures where it's
	 * null--the following will handle this case as "no prefix" at
	 * all --msa  (": NOTICE nick ...")
	 */
	
	/* for now, do this only for clients */
	if (*sender && !strchr(sender, '.'))
	{
	    u = _TBL(user).get(sender);

	    para[0] = sender;

	    /*
	     * Hmm! If the client corresponding to the prefix is not
	     * found--what is the correct action??? Now, I will ignore the
	     * message (old IRC just let it through as if the prefix just
	     * wasn't there...) --msa
	     */
	    if (!u) 
	    {
		remove_unknown(sender, buffer);
		return -1;
	    }

	}
	while (*ch == ' ')
	    ch++;
    }

    if (*ch == '\0') 
	return (-1);
    /*
     * Extract the command code from the packet.  Point s to the end
     * of the command code and calculate the length using pointer
     * arithmetic.  Note: only need length for numerics and *all*
     * numerics must have parameters and thus a space after the command
     * code. -avalon
     * 
     * ummm???? - Dianora
     */

    s = strchr(ch, ' ');
    
    if (s)
    {
        *s = '\0';
	len = s++ - ch;
    }
    else
    {
	gchar *p = ch;
	while(*p++)
	    len++;
    }
    
    mptr = hash_get_cmd(ch, len);
    
    if (!mptr || !mptr->cmd) 
    {
	g_warning("cmd not found (%s) ..", ch);
        return -1;
    }
    
    /*
     * Must the following loop really be so devious? On surface it
     * splits the message to parameters from blank spaces. But, if
     * paramcount has been reached, the rest of the message goes into
     * this last parameter (about same effect as ":" has...) --msa
     */

    /* Note initially true: s==NULL || *(s-1) == '\0' !! */
    
    i = 1;
    if (s) 
    {
	for (;;) 
	{
	    while (*s == ' ')
		*s++ = '\0';
	    
	    if (*s == '\0')
		break;
	    if (*s == ':') 
	    {
		/* The rest is a single parameter */
		para[i++] = s + 1;
		break;
	    }
	    para[i++] = s;
	    if (i >= MAXPARA)
		break;
	    
	    while(*s && *s != ' ')
		s++;
	}
    }
    
    para[i] = NULL;
    mptr->count++;
    
    return (*mptr->func) (u, i, para);
}

static void remove_unknown(gchar *sender, gchar *buffer)
{
    /*
     * Do kill if it came from a server because it means there is a
     * ghost user on the other server which needs to be removed. -avalon
     * Tell opers about this. -Taner
     */
    if (!strchr(sender, '.'))
    {
	send_out(":%s KILL %s :%s (%s<-(?))",
		me.name, sender, me.name, sender);
    }
    else
    {
	send_out(":%s GLOBOPS :Unknown prefix (%s), Squitting %s",
		me.name, buffer, sender);
	send_out(":%s SQUIT %s :Unknown prefix (%s)",
		me.name, sender, buffer);
    }
}
